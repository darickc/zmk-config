/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define LOWER   1
#define RAISE   2

#define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer

/ {
    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | SHFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | RET |   | SPC | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E         &kp R      &kp T      &kp Y      &kp U        &kp I        &kp O    &kp P     &kp BSPC
&kp LGUI   &kp A  &kp S  &kp D         &kp F      &kp G      &kp H      &kp J        &kp K        &kp L    &kp SEMI  &kp SQT
&kp LCTRL  &kp Z  &kp X  &kp C         &kp V      &kp B      &kp N      &kp M        &kp COMMA    &kp DOT  &kp FSLH  &kp ESC
                         &kp LEFT_ALT  &kp LSHFT  &kp RET    &kp SPACE  &mo_tog 1 1  &mo_tog 2 2
            >;
        };

        num+sym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp NUMBER_1    &kp NUMBER_2     &kp NUMBER_3          &kp NUMBER_4           &kp N5           &kp NUMBER_6  &kp N7  &kp N8  &kp N9  &kp N0     &trans
&trans     &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp BACKSLASH    &kp SLASH     &kp N4  &kp N5  &kp N6  &kp MINUS  &kp EQUAL
&trans     &trans          &trans           &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans           &kp PLUS      &kp N1  &kp N2  &kp N3  &kp DOT    &trans
                                            &trans                &trans                 &trans           &trans        &trans  &trans
            >;
        };

        nav {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans    &kp C_PREV        &kp HOME  &kp UP       &kp END    &kp C_MUTE       &trans
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans    &kp C_PLAY_PAUSE  &kp LEFT  &kp DOWN     &kp RIGHT  &kp C_VOLUME_UP  &trans
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans    &kp C_NEXT        &kp DEL   &kp PAGE_UP  &kp PG_DN  &kp C_VOL_DN     &trans
                         &trans   &trans   &trans    &trans            &trans    &trans
            >;
        };

        tri_layer {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <3>;
        };
    };
};
