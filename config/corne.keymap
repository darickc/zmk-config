/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#define LOWER   1
#define RAISE   2
#define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer

/ {
         behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | SHFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | RET |   | SPC | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp E     &kp R  &kp T         &kp Y      &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LGUI          &kp A  &kp S  &kp D     &kp F  &kp G         &kp H      &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LCTRL         &kp Z  &kp X  &kp C     &kp V  &kp B         &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                                &kp LSHFT  MO_TOG(LOWER)       &kp RET    &kp SPACE  MO_TOG(RAISE)  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &trans  &trans  &trans  &trans  &trans    &kp BSLH    &kp N7    &kp N8    &kp N9     &kp MINUS  &kp BSPC
&bt LSHFT   &trans  &trans  &trans  &trans  &trans    &kp LBKT    &kp N4    &kp N5    &kp N6     &kp EQUAL  &kp GRAVE
&kp LCTRL   &trans  &trans  &trans  &trans  &trans    &kp RBRC    &kp N1    &kp N2    &kp N3     &kp DOT    &trans
                            &kp LGUI      &trans       &trans       &trans   &trans    &kp N0
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp F1    &kp F2   &kp F3     &kp F4     &trans       &trans  &kp HOME   &kp UP     &kp PG_UP  &trans  &kp BSPC
&kp LCTRL  &kp F5    &kp F6   &kp F7     &kp F8     &trans       &trans  &kp LEFT   &kp DOWN   &kp RIGHT  &trans  &trans
&kp LSHFT  &kp F9    &kp F10  &kp F11    &kp F12    &trans       &trans  &kp END    &kp LBRC   &kp PG_DN  &trans  &trans
                             &kp LGUI  &trans    &trans    &trans    &trans     &kp RALT
            >;
        };

        tri_layer {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1   &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans        &trans        &trans  &trans  &trans
&trans      &trans        &trans         &trans        &trans        &trans          &trans  &kp C_PP      &kp C_PREV    &kp C_NEXT  &trans  &trans
&trans      &trans        &trans         &trans       &trans         &trans          &trans  &kp C_VOL_DN  &kp C_VOL_UP  &trans  &trans  &trans
                                        &trans            &trans        &trans          &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <3>;
        };
    };
};
